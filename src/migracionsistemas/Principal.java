/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package migracionsistemas;

import com.sun.mail.dsn.message_deliverystatus;
import java.awt.Frame;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.io.File;
import java.io.FileInputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Iterator;
import org.apache.poi.ss.usermodel.DataFormatter;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

/**
 *
 * @author vinic
 */
public class Principal extends javax.swing.JFrame {

    coneccion con = new coneccion();
    Connection coneccion = con.conectar();
    private int datosInsetar = 0;
    private int datosInsetados = 0;
    private int datosNoInsetar = 0;
    private ArrayList<String[]> lista;

    public Principal() {
        initComponents();
        lista = new ArrayList<>();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        url = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        res = new javax.swing.JTextArea();
        url1 = new javax.swing.JLabel();
        url2 = new javax.swing.JLabel();
        url3 = new javax.swing.JLabel();
        url4 = new javax.swing.JLabel();
        migrar = new javax.swing.JTextField();
        nomigrados = new javax.swing.JTextField();
        migrados = new javax.swing.JTextField();
        menuBar = new javax.swing.JMenuBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        url.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N

        jButton1.setFont(new java.awt.Font("Arial Black", 1, 12)); // NOI18N
        jButton1.setText("CORRER MIGRACION");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        res.setColumns(20);
        res.setRows(5);
        jScrollPane1.setViewportView(res);

        url1.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        url1.setText("TOTOTAL DE DATOS MIGRADOS:");

        url2.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        url2.setText("ARCHIVO");

        url3.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        url3.setText("TOTAL DATOS NO MIGRADOS:");

        url4.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        url4.setText("TOTOTAL DE DATOS A MIGRAR:");

        migrar.setFont(new java.awt.Font("Tahoma", 2, 12)); // NOI18N

        nomigrados.setFont(new java.awt.Font("Tahoma", 2, 12)); // NOI18N

        migrados.setFont(new java.awt.Font("Tahoma", 2, 12)); // NOI18N
        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(118, 118, 118)
                        .addComponent(url, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(96, 96, 96)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(url1, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 809, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(url3, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(468, 468, 468)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(nomigrados, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(migrar, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(migrados, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(152, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(24, 24, 24)
                    .addComponent(url2, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(935, Short.MAX_VALUE)))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(97, 97, 97)
                    .addComponent(url4, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(661, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton1)
                    .addComponent(url, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(37, 37, 37)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 384, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addComponent(migrar, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(url1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(migrados, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(url3, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nomigrados, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(33, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(41, 41, 41)
                    .addComponent(url2, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(599, Short.MAX_VALUE)))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(524, Short.MAX_VALUE)
                    .addComponent(url4, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(116, 116, 116)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        abrirArchivo();
        migrados.setText(datosInsetados+"");
        nomigrados.setText(datosNoInsetar+"");
        migrar.setText(datosInsetar+"");
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true);
            }
        });
    }

    private String abrirArchivo() {

        String aux = "";
        String texto = "";
        try {
            JFileChooser file = new JFileChooser();
            file.showOpenDialog(this);
            File abre = file.getSelectedFile();
            url.setText(abre.getName());
            if (abre != null) {
                //SUELDO
                try {
                    XSSFWorkbook worbook = new XSSFWorkbook(abre);
                    XSSFSheet sheet = worbook.getSheetAt(1);
                    Iterator<Row> rowIterator = sheet.iterator();
                    Row row;
                    DataFormatter formatter = new DataFormatter();
                    int contaux = 0;
                    boolean bandera = false;
                    while (rowIterator.hasNext()) {
                        row = rowIterator.next();
                        Iterator<Cell> cellIterator = row.cellIterator();
                        Cell cell;
                        int cont = 0;
                        String cedula = "";
                        String sueldo = "";
                        while (cellIterator.hasNext()) {
                            contaux++;
                            cell = cellIterator.next();
                            if (bandera == true) {
                                switch (cell.getColumnIndex()) {
                                    case 0:
                                        cedula = formatter.formatCellValue(cell);
                                        break;
                                    case 1:
                                        sueldo = formatter.formatCellValue(cell);
                                        break;
                                }
                            }
                        }
                        if (bandera) {
                            String arreglo[] = new String[2];
                            arreglo[0] = cedula;
                            arreglo[1] = sueldo;
                            if (cedula == "") {
                                arreglo[0] = "!@#$%^&*";
                            }
                            if (sueldo == "") {
                                arreglo[1] = "!@#$%^&*";
                            }
                            lista.add(arreglo);
                        }
                        bandera = true;

                    }
                } catch (Exception e) {
                    System.out.println("Error al leer la columna sueldo");
                }
                ///TODO BEIN
                try {
                    XSSFWorkbook worbook = new XSSFWorkbook(abre);
                    XSSFSheet sheet = worbook.getSheetAt(0);
                    Iterator<Row> rowIterator = sheet.iterator();
                    Row row;
                    DataFormatter formatter = new DataFormatter();
                    int contaux = 0;
                    boolean bandera = false;
                    while (rowIterator.hasNext()) {
                        row = rowIterator.next();
                        Iterator<Cell> cellIterator = row.cellIterator();
                        Cell cell;
                        int cont = 0;
                        String cedula = "";
                        String nombre = "";
                        String apellido = "";
                        String direccion = "";
                        String telefono = "";
                        while (cellIterator.hasNext()) {
                            contaux++;
                            cell = cellIterator.next();
                            if (bandera == true) {
                                switch (cell.getColumnIndex()) {
                                    case 0:
                                        cedula = formatter.formatCellValue(cell);
                                        break;
                                    case 1:
                                        nombre = formatter.formatCellValue(cell);
                                        break;
                                    case 2:
                                        apellido = formatter.formatCellValue(cell);
                                        break;
                                    case 3:
                                        direccion = formatter.formatCellValue(cell);
                                        break;
                                    case 4:
                                        telefono = formatter.formatCellValue(cell);
                                        break;
                                }
                            }

                        }
                        if (bandera) {
                            inseratar(cedula, nombre, apellido, direccion, telefono);
                        }
                        bandera = true;

                    }
                } catch (Exception e) {
                    System.out.println("Error al leer la columna Empleado");
                }

                if (!lista.isEmpty()) {

                    res.setText(res.getText() + " \n \n                 RESULTADOS SOBRANTES DE SUELDOS \n                      DATOS");
                    for (String[] strings : lista) {
                        if (strings[0] == "!@#$%^&*") {
                            res.setText(res.getText() + "\n                          | " + strings[1] + " | ");
                            res.setText(res.getText() + "\n                              * la cedula vacia");
                        } else if (strings[1] == "!@#$%^&*") {
                            res.setText(res.getText() + "\n                          | " + strings[0] + " | ");
                            res.setText(res.getText() + "\n                              * El sueldo vaci0");
                        } else {
                            res.setText(res.getText() + "\n                          |" + strings[0] + " | " + strings[1] + "|");
                            res.setText(res.getText() + "\n                              * La cedula no existe");
                        }
                    }

                }

            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex + ""
                    + "\nNo se ha encontrado el archivo",
                    "ADVERTENCIA!!!", JOptionPane.WARNING_MESSAGE);
        }
        return texto;//El texto se almacena en el JTextArea
    }

    public void inseratar(String cedula, String nombre, String apellido, String direccion, String telefono) {
        datosInsetar++;
        boolean bandera = true;
        String sueldo = "";
        int cont = 1;
        String arg[] = new String[2];
        for (String[] strings : lista) {
            if (cedula.equals(strings[0])) {
                sueldo = strings[1];
                arg = strings;
                break;
            }
        }
        if (arg != null) {
            lista.remove(arg);
        }

        String mensaje = "\n Insertando >>>  | " + cedula + " | " + nombre + " | " + apellido + " | " + direccion + " | " + telefono + " | " + sueldo + "      Resultados:";
        if (buscar(cedula)) {
            mensaje = mensaje + "\n                     " + cont + ".- Ya existe un empleado con esta cedula ";
            bandera = false;
            cont++;
        }
        if (cedula.length() != 10) {
            mensaje = mensaje + "\n                     " + cont + ".- La cedula incorrecta ";
            bandera = false;
            cont++;
        }
        if (nombre == "") {
            mensaje = mensaje + "\n                     " + cont + ".- El nombre incorrecto ";
            bandera = false;
            cont++;
        }
        if (apellido == "") {
            mensaje = mensaje + "\n                     " + cont + ".- El apellido incorrecto";
            bandera = false;
            cont++;
        }
        if (direccion == "") {
            direccion = "S/D";
        }
        if (telefono == "") {
            mensaje = mensaje + "\n                     " + cont + ".- El telefono esta incorrecto ";
            bandera = false;
            cont++;
        }
        if (sueldo == "") {
            mensaje = mensaje + "\n                     " + cont + ".- El sueldo esta incorrecto ";
            bandera = false;
            cont++;
        }

        if (bandera) {
            try {
                String Query = "INSERT INTO empleados(CEDULA,NOMBRE,DIRECCION,TELEFONO,SUELDO)values(?,?,?,?,?) ";
                PreparedStatement statement = coneccion.prepareStatement(Query);
                statement.setString(1, cedula);
                statement.setString(2, apellido + " " + nombre);
                statement.setString(3, direccion);
                statement.setString(4, telefono);
                statement.setString(5, sueldo);
                statement.execute();
                coneccion.commit();
                mensaje = mensaje + "\n                     **CLIETE INSERTADO CORRECTAMENTE**";
                res.setText(res.getText() + mensaje);
                datosInsetados++;
            } catch (SQLException e) {
                System.out.println(e.getErrorCode() + " erro codigo");
            }
        } else {
            res.setText(res.getText() + mensaje);
            datosNoInsetar++;
        }

    }

    public boolean buscar(String cedula) {
        boolean bandera = true;
        String sql = "select * from empleados where Cedula = '" + cedula + "'";
        try {
            Statement se = coneccion.createStatement();
            ResultSet seter = se.executeQuery(sql);
            if (seter.getRow() == 0) {
                bandera = false;
            }
            while (seter.next()) {
                bandera = true;
            }
        } catch (SQLException ex) {
            System.out.println("Error de lectura :" + ex.getMessage());
        }
        return bandera;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JTextField migrados;
    private javax.swing.JTextField migrar;
    private javax.swing.JTextField nomigrados;
    private javax.swing.JTextArea res;
    private javax.swing.JLabel url;
    private javax.swing.JLabel url1;
    private javax.swing.JLabel url2;
    private javax.swing.JLabel url3;
    private javax.swing.JLabel url4;
    // End of variables declaration//GEN-END:variables

}
